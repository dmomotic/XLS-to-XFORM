/* ParserJCCTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserJCCTokenManager.java */
package Analizador;
import java.util.ArrayList;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserJCCTokenManager implements ParserJCCConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 46);
      case 13:
         return jjStopAtPos(0, 47);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x21000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20226004060L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x48800008L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x291400000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x140001400004L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000180000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100008780L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x6000000010L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200002L);
      case 123:
         return jjStopAtPos(0, 48);
      case 125:
         return jjStopAtPos(0, 49);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20100044000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400004L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x748000a780L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x290000200002L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x140048000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8a26180060L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10021000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10010L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x11498002000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000060L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000008L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x26000015000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x280320000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008006L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x180L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040a00000L);
      default :
         return 3;
   }
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x280000040000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x160000004000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x6040008010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x11400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x96801060L);
      case 79:
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(3, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20004L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x12180L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200600L);
      default :
         return 4;
   }
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000001000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10008000e04L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000060L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x140220030000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000a00000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80040000L);
      case 79:
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x41580190L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000006008L);
      default :
         return 5;
   }
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140080001000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x6200000000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xe0008L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000004L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000008190L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000004000L);
      case 77:
      case 109:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 79:
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x6200060L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000002600L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800L);
      default :
         return 6;
   }
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x6280060L);
      case 65:
      case 97:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x20001000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10010800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x6200000600L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20180L);
      case 79:
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 82:
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(6, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x140000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8040008L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000004L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x280000000000L);
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x140000000000L);
      case 65:
      case 97:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(7, 3);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x10600L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000180L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x81000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x6200000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000060L);
      case 82:
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 24);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x1020040800L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         break;
      default :
         return 8;
   }
   return 8;
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 36);
         return jjMoveStringLiteralDfa9_0(active0, 0x40020000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(8, 12);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0xb0180L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000000L);
      case 79:
      case 111:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(8, 18);
         return jjMoveStringLiteralDfa9_0(active0, 0x208440L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x280002000020L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      default :
         return 9;
   }
   return 9;
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x280000000000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000L);
      case 65:
      case 97:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(9, 2);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(9, 5);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100002000800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(9, 15);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x80040L);
      default :
         return 10;
   }
   return 10;
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x300000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000200100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(10, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      default :
         return 11;
   }
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(11, 19);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(11, 10);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x44000200000L);
      default :
         return 12;
   }
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 26);
         return jjMoveStringLiteralDfa13_0(active0, 0x4000200000L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(12, 8);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(12, 29);
         break;
      case 79:
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(12, 37);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(12, 44);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      default :
         return 13;
   }
   return 13;
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L);
      case 79:
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(13, 11);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);
      default :
         return 14;
   }
   return 14;
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(14, 45);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      default :
         return 15;
   }
   return 15;
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000200000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(15, 25);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L);
      default :
         return 16;
   }
   return 16;
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(16, 21);
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000L);
      default :
         return 17;
   }
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(17, 38);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(17, 42);
         break;
      default :
         return 18;
   }
   return 18;
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000L);
      default :
         return 19;
   }
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(19, 43);
         break;
      default :
         return 20;
   }
   return 20;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\12", "\15", "\173", "\175", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public ParserJCCTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ParserJCCTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[0];
    static private final int[] jjstateSet = new int[2 * 0];

    
    static protected char curChar;
}
